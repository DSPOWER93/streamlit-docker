on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true
        default: 'prod'
      tag:
        type: string
        required: true


# on:
#   push:
#     branches: [ main ]

# env:
#   # Define a global variable using the repository/organization-level variable
#   ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}
#   ECR_REPOSITORY_NAME: ${{ vars.ECR_REPOSITORY_NAME }} 


permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write    # This is required for actions/checkout


name: Create Image in ECR & Deploy container to ECS
jobs:
  build-and-deploy:
    name: Deploy container to ECS
    runs-on: [ ubuntu-latest ]
    environment: ${{ inputs.environment }}
    
    steps:

      - uses: actions/checkout@v3 # github Checkout
      - name: List Files after copying repo to Ubuntu terminal  
        run: ls -a

      - name: show Variables
        run: |
          echo ${{ vars.AWS_ROLE }}
          echo ${{ vars.AWS_REGION }}
          echo "TAG:" ${{ inputs.tag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_ROLE }} # Setting up connection using OIDC method. 
          aws-region: ${{ vars.AWS_REGION }} # AWS region.

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Extract variables from config.json
        id: read-config
        run: |
          ECR_REPO_NAME=$(jq -r '.ecrRepositoryName' config/config.json)
          echo "ECR_REPO_NAME=$ECR_REPO_NAME" >> $GITHUB_ENV

          CF_ECR_JOB_NAME=$(jq -r '.ecrCloudFormationJobName' config/config.json)
          echo "CF_ECR_JOB_NAME=$CF_ECR_JOB_NAME" >> $GITHUB_ENV

          TASK_NAME=$(jq -r '.taskDefinition.name' config/config.json)
          echo "TASK_NAME=$TASK_NAME" >> $GITHUB_ENV

          CONTAINER_NAME=$(jq -r '.taskDefinition.containerName' config/config.json)
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV

          PORT_MAPPING_NAME=$(jq -r '.taskDefinition.portMappingName' config/config.json)
          echo "PORT_MAPPING_NAME=$PORT_MAPPING_NAME" >> $GITHUB_ENV

          TASK_EXECUTION_ROLE_ARN=$(jq -r '.taskDefinition.taskExecutionRoleArn' config/config.json)
          echo "TASK_EXECUTION_ROLE_ARN=$TASK_EXECUTION_ROLE_ARN" >> $GITHUB_ENV
          
          TASK_CF_NAME=$(jq -r '.taskDefinition.cloudFormationTemplateName' config/config.json)
          echo "TASK_CF_NAME=$TASK_CF_NAME" >> $GITHUB_ENV

      - name: Check if ECR repository already exists
        id: check-ecr-repo
        run: |
          if aws ecr describe-repositories --repository-names $ECR_REPO_NAME > /dev/null 2>&1; then
            echo "ECR repository $ECR_REPO_NAME already exists."
            echo "SKIP_CREATION=true" >> $GITHUB_ENV
          else
            echo "ECR repository $ECR_REPO_NAME does not exist. Proceeding with creation."
            echo "SKIP_CREATION=false" >> $GITHUB_ENV
          fi
          cat $GITHUB_ENV
          echo "To be skipped $SKIP_CREATION"

      - name: Deploy CloudFormation stack for ECR Repo (if repository does not exist)
        if: env.SKIP_CREATION == 'false'
        run: |
          # Ensure cloudformation stack doesn't exist before creating a new one.
          aws cloudformation delete-stack --stack-name $CF_ECR_JOB_NAME
          # Buffer time period between Delelting existing old stack and creating new one.
          sleep 30
          #deploy cloud formation stack to create ECR repo
          aws cloudformation deploy \
            --template-file cloudformation/cloudformation_ecr.yml \
            --stack-name $CF_ECR_JOB_NAME \
            --parameter-overrides ECRRepositoryName=$ECR_REPO_NAME \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Skip CloudFormation deployment (if repository exists)
        if: env.SKIP_CREATION == 'true'
        run: |
          echo "Skipping CloudFormation deployment because the ECR repository already exists."

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # ECR registery path from ecr Like: 123456789.dkr.ecr.us-east-1.amazonaws.com
          IMAGE_TAG: ${{ inputs.tag }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
          ecr_image_uri=$ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
          echo "ecr_image_uri=$ecr_image_uri" >> $GITHUB_ENV
          echo $ecr_image_uri

      - name: Deploy CloudFormation Stack for Task Definition
        run: |
          # Ensure cloudformation stack doesn't exist before creating a new one.
          aws cloudformation delete-stack --stack-name ${{ env.TASK_CF_NAME }}
          sleep 30
          aws cloudformation deploy \
            --stack-name ${{ env.TASK_CF_NAME }} \
            --template-file cloudformation/task_definition.yml \
            --parameter-overrides \
                TaskDefinitionName=${{ env.TASK_NAME }} \
                ContainerName=${{ env.CONTAINER_NAME }} \
                ImageArn=${{ env.ecr_image_uri }} \
                PortMappingName=${{ env.PORT_MAPPING_NAME }} \
                AccountId=${{ vars.ACCOUNT_ID }} \
                Region=${{ vars.AWS_REGION }} \
                ExistingTaskExecutionRoleArn=${{ env.TASK_EXECUTION_ROLE_ARN }} \
                LogGroupName="/ecs/${{ env.TASK_NAME }}" \
            --capabilities CAPABILITY_IAM

      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition \
      #     --task-definition $ECS_TASK_DEFINITION \
      #     --query taskDefinition \
      #     --region ${{ vars.AWS_REGION }} > task-definition.json
      #     echo $ECR_REPOSITORY_NAME



      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json # Task definition downloaded from Step: Download task definition
      #     container-name: ${{ vars.ECS_CONTAINER_NAME }} # Repository variable to name the container file from 
      #     image: ${{ steps.build-image.outputs.image }}
      
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: medical_code_mapping_service_v2 # service name
      #     cluster: medical_code_mapping_cluster # cluster Name
      #     wait-for-service-stability: true


# name: Deploy ECS Task Definition

# on:
#   workflow_dispatch:

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsRole
#           aws-region: us-east-1

#       - name: Read config values
#         id: config
#         run: |
#           TASK_NAME=$(jq -r '.taskDefinition.name' config/config.json)
#           CONTAINER_NAME=$(jq -r '.taskDefinition.containerName' config/config.json)
#           IMAGE_ARN=$(jq -r '.taskDefinition.imageArn' config/config.json)
#           PORT_MAPPING_NAME=$(jq -r '.taskDefinition.portMappingName' config/config.json)
#           TASK_EXECUTION_ROLE_ARN=$(jq -r '.taskDefinition.taskExecutionRoleArn' config/config.json)
#           echo "TASK_NAME=$TASK_NAME" >> $GITHUB_ENV
#           echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
#           echo "IMAGE_ARN=$IMAGE_ARN" >> $GITHUB_ENV
#           echo "PORT_MAPPING_NAME=$PORT_MAPPING_NAME" >> $GITHUB_ENV
#           echo "TASK_EXECUTION_ROLE_ARN=$TASK_EXECUTION_ROLE_ARN" >> $GITHUB_ENV

#       - name: Deploy CloudFormation Stack
#         run: |
#           aws cloudformation deploy \
#             --stack-name ecs-task-definition-stack \
#             --template-file cloudformation/task-definition.yaml \
#             --parameter-overrides \
#                 TaskDefinitionName=${{ env.TASK_NAME }} \
#                 ContainerName=${{ env.CONTAINER_NAME }} \
#                 ImageArn=${{ env.IMAGE_ARN }} \
#                 PortMappingName=${{ env.PORT_MAPPING_NAME }} \
#                 AccountId=${{ secrets.AWS_ACCOUNT_ID }} \
#                 Region=${{ env.AWS_REGION }} \
#                 ExistingTaskExecutionRoleArn=${{ env.TASK_EXECUTION_ROLE_ARN }} \
#             --capabilities CAPABILITY_IAM

