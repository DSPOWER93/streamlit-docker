on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true
        default: 'prod'
      tag:
        type: string
        required: true


# on:
#   push:
#     branches: [ main ]

env:
  # Define a global variable using the repository/organization-level variable
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}
  ECR_REPOSITORY_NAME: ${{ vars.ECR_REPOSITORY_NAME }} 


permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write    # This is required for actions/checkout


name: Deploy container to ECS
jobs:
  build-and-deploy:
    name: Deploy container to ECS
    runs-on: [ ubuntu-latest ]
    environment: ${{ inputs.environment }}
    
    steps:

      - uses: actions/checkout@v3 # github Checkout
      - name: List Files after copying repo to Ubuntu terminal  
        run: ls -a

      - name: show credentials
        run: |
          echo ${{ vars.AWS_ROLE }}
          echo ${{ vars.AWS_REGION }}
          echo "ECS_TASK_DEFINITION: $ECS_TASK_DEFINITION"
          echo "TAG:" ${{ inputs.tag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_ROLE }} # Setting up connection using OIDC method. 
          aws-region: ${{ vars.AWS_REGION }} # AWS region.

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition \
          --region ${{ vars.AWS_REGION }} > task-definition.json


      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # ECR registery path from ecr Like: 123456789.dkr.ecr.us-east-1.amazonaws.com
          IMAGE_TAG: ${{ inputs.tag }}
          REPOSITORY: ECR_REPOSITORY_NAME  # Docker repo name where Image has to be created.
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


